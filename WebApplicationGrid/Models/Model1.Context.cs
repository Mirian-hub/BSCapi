//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplicationGrid.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int WebShellOperation(Nullable<int> shellUserID, ObjectParameter xmlOut)
        {
            var shellUserIDParameter = shellUserID.HasValue ?
                new ObjectParameter("ShellUserID", shellUserID) :
                new ObjectParameter("ShellUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebShellOperation", shellUserIDParameter, xmlOut);
        }
    
        public virtual int WebShellUser(string shellUserKey, string shellUserPassword, ObjectParameter xmlOut)
        {
            var shellUserKeyParameter = shellUserKey != null ?
                new ObjectParameter("ShellUserKey", shellUserKey) :
                new ObjectParameter("ShellUserKey", typeof(string));
    
            var shellUserPasswordParameter = shellUserPassword != null ?
                new ObjectParameter("ShellUserPassword", shellUserPassword) :
                new ObjectParameter("ShellUserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebShellUser", shellUserKeyParameter, shellUserPasswordParameter, xmlOut);
        }
    
        public virtual int WebShellTerm(Nullable<int> shellUserID, Nullable<int> shellOperationID, ObjectParameter xmlOut)
        {
            var shellUserIDParameter = shellUserID.HasValue ?
                new ObjectParameter("ShellUserID", shellUserID) :
                new ObjectParameter("ShellUserID", typeof(int));
    
            var shellOperationIDParameter = shellOperationID.HasValue ?
                new ObjectParameter("ShellOperationID", shellOperationID) :
                new ObjectParameter("ShellOperationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebShellTerm", shellUserIDParameter, shellOperationIDParameter, xmlOut);
        }
    
        public virtual int WebFuncExecuter(string functionName, string operationID)
        {
            var functionNameParameter = functionName != null ?
                new ObjectParameter("FunctionName", functionName) :
                new ObjectParameter("FunctionName", typeof(string));
    
            var operationIDParameter = operationID != null ?
                new ObjectParameter("OperationID", operationID) :
                new ObjectParameter("OperationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebFuncExecuter", functionNameParameter, operationIDParameter);
        }
    
        public virtual int WebGroupAll(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebGroupAll", tableNameParameter);
        }
    
        public virtual int WebGroupsAll(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebGroupsAll", tableNameParameter);
        }
    }
}
